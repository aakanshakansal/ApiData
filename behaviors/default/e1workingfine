import { PawnBehavior } from "../PrototypeBehavior";
import * as THREE from "three";
import * as dat from "dat.gui";
import Highcharts from "highcharts";

class LightPawn extends PawnBehavior {
  setup() {
    let trm = this.service("ThreeRenderManager");
    let group = this.shape;
    let THREE = Microverse.THREE;
    let model;
    let params;
    let temperatureInterval;

    if (this.actor._cardData.toneMappingExposure !== undefined) {
      trm.renderer.toneMappingExposure =
        this.actor._cardData.toneMappingExposure;
    }

    const originalMaterials = new Map(); // Store original materials for each object
    let highlightedObject = null; // Define highlightedObject variable

    // List of allowed objects to interact with
    const allowedObjects = new Set();
    const onDocumentMouseClick = async (event) => {
      const mouse = new THREE.Vector2(
        (event.clientX / window.innerWidth) * 2 - 1,
        -(event.clientY / window.innerHeight) * 2 + 1
      );

      const raycaster = new THREE.Raycaster();
      raycaster.setFromCamera(mouse, trm.camera);

      // Intersect the objects in the allowedObjects Set
      const intersects = raycaster.intersectObjects(
        Array.from(allowedObjects),
        true
      );

      if (intersects.length > 0) {
        const clickedObject = intersects[0].object;

        console.log("Clicked object name:", clickedObject.name); // Log the name of the clicked object

        if (highlightedObject === clickedObject) {
          // Reset object when clicked twice
          resetObjectMaterial(clickedObject);
          hideAllInfo();
          stopSpeaking();
          highlightedObject = null;
          await toggleAPI(0); // Send value 0 to API when object is unselected
        } else {
          // Reset previously highlighted object
          if (highlightedObject) {
            resetObjectMaterial(highlightedObject);
            stopSpeaking();
          }

          // Highlight the clicked object
          highlightObject(clickedObject);
          speakObjectName(clickedObject.name);

          // Send value 1 to API since a clickable object was selected
          await toggleAPI(1);

          // Check if the clicked object is a tile, rack, or another type of object
          handleObjectInteraction(clickedObject);
        }
      } else {
        // Clicked outside the allowed objects, do not change the API state
        console.log("Clicked outside the model, no API toggle.");

        // Reset and hide info if previously highlighted
        if (highlightedObject) {
          resetObjectMaterial(highlightedObject);
          stopSpeaking();
          highlightedObject = null; // Clear the highlightedObject
          hideAllInfo();
        }
        // Don't toggle API since no valid object was clicked
      }
    };

    const toggleAPI = async (value) => {
      try {
        const response = await fetch(
          "https://btnstate.onrender.com/toggle-btn",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ value }),
          }
        );

        const result = await response.json();
        console.log(`API Response: ${result}`);
      } catch (error) {
        console.error("Error sending toggle value to API:", error);
      }
    };

    const checkAPIResponse = async () => {
      try {
        const response = await fetch("https://btnstate.onrender.com/btn-state");
        const result = await response.json();
        console.log(result);
        return result; // Assuming the response has a 'value' field
      } catch (error) {
        console.error("Error checking API response:", error);
        return 0; // Return 0 if there is an error
      }
    };

    const handleObjectInteraction = async (clickedObject) => {
      const apiValue = await checkAPIResponse(); // Check the API response

      if (apiValue === 1) {
        let isTile = false;
        let isRack = false;
        let isObject = false;

        // Check if clickedObject is a tile
        for (let i = 0; i <= 77; i++) {
          if (clickedObject === model.children[71].children[i]) {
            isTile = true;
            break;
          }
        }

        if (isTile) {
          hideServerInfo();
          hideCharts();
          hideCharts2();
          hideCharts1();
          hideCharts3();
          hideHVACInfo();
          hideCharts4();
          displayTileInfo(clickedObject);
        } else {
          // Check if clickedObject is a rack
          for (let i = 0; i <= 70; i++) {
            if (clickedObject === model.children[i].children[0]) {
              if (i >= 5 && i <= 15) {
                continue; // Skip certain racks
              }
              isRack = true;
              break;
            }
          }

          if (isRack) {
            displayServerInfo(clickedObject);
            updateCharts(clickedObject);
            hideTileInfo();
            hideHVACInfo();
            hideCharts();
            hideCharts2();
            hideCharts4();
          } else {
            // Check if clickedObject is another specific object type
            for (let i = 0; i <= 17; i++) {
              for (let j = 0; j <= 2; j++) {
                if (
                  clickedObject === model.children[79].children[i].children[j]
                ) {
                  isObject = true;
                  break;
                }
              }
            }

            if (isObject) {
              displayHVACInfo(clickedObject);
              updateCharts2(clickedObject);
              hideServerInfo();
              hideCharts3();
              hideCharts1();
              hideTileInfo();
              hideCharts();
              hideCharts2();
            } else {
              displayServerInfo(clickedObject);
              hideHVACInfo();
              updateCharts1(clickedObject);
              hideTileInfo();
              hideCharts1();
              hideCharts3();
              hideCharts4();
              hideHVACInfo();
            }
          }
        }
      } else {
        // Hide the serverInfo div and charts if no object is clicked
        hideAllInfo();

        // Reset previously highlighted object
        if (highlightedObject) {
          resetObjectMaterial(highlightedObject);
          stopSpeaking();
          highlightedObject = null; // Clear the highlightedObject
        }
      }
    };

    document.addEventListener("click", onDocumentMouseClick, false);

    // Load the GLTF model
    // Initialize DRACOLoader
    const dracoLoader = new THREE.DRACOLoader();
    dracoLoader.setDecoderPath(
      "https://cdn.jsdelivr.net/npm/three@0.152.0/examples/jsm/libs/draco/"
    );

    // Set DRACOLoader as an extension to GLTFLoader
    const gltfLoader = new THREE.GLTFLoader();
    gltfLoader.setDRACOLoader(dracoLoader);

    this.lights = [];

    const loadModelPromise = new Promise((resolve, reject) => {
      gltfLoader.load(
        "./assets/Change New.glb",
        (gltf) => {
          model = gltf.scene;

          model.position.set(0, -1.6, 0);
          const scaleFactor = 2;
          model.scale.set(scaleFactor, scaleFactor, scaleFactor);

          group.add(model);
          console.log(model);

          model.children.forEach((child, index) => {
            if ((index >= 0 && index <= 4) || (index >= 16 && index <= 70)) {
              child.children.forEach((subchild, subIndex) => {
                if (subIndex >= 1 && subIndex <= 12) {
                  allowedObjects.add(subchild);
                }
              });
            }
          });
          model.children.forEach((child, index) => {
            if ((index >= 0 && index <= 4) || (index >= 16 && index <= 70)) {
              child.children.forEach((subchild, subIndex) => {
                if (subIndex === 0) {
                  allowedObjects.add(subchild);
                }
              });
            }
          });

          model.children.forEach((child, index) => {
            if (index == 71) {
              allowedObjects.add(child);
            }
          });
          model.children.forEach((child, index) => {
            if (index == 79) {
              allowedObjects.add(child);
            }
          });
          // setInterval(() => {
          //   allowedObjects.forEach((object) => {
          //     checkTemperatureAndUpdateColor(object);
          //   });
          // }, 5000);

          // setInterval(() => {
          //   if (params.checkTemperature) {
          //     allowedObjects.forEach((object) => {
          //       checkTemperatureAndUpdateColor(object);
          //     });
          //   }
          // }, 5000);

          resolve(model);
        },
        null,
        (error) => {
          console.error("Error loading GLTF model:", error);
          reject(error);
        }
      );
    });

    loadModelPromise.catch((error) => {
      console.error("Error loading GLTF model:", error);
    });
  }

  teardown() {
    let scene = this.service("ThreeRenderManager").scene;

    scene.background?.dispose();
    scene.environment?.dispose();
    scene.background = null;
    scene.environment = null;

    // Dispose particle system
    if (this.particleSystem) {
      this.shape.remove(this.particleSystem);
      this.particleSystem.geometry.dispose();
      this.particleSystem.material.dispose();
    }
  }
}

export default {
  modules: [
    {
      name: "Few",
      pawnBehaviors: [LightPawn],
    },
  ],
};
